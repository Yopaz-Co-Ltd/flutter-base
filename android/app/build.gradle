def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

project.ext.envConfigFiles = [
        developdebug  : ".env.develop",
        developrelease: ".env.develop",
        stagingdebug  : ".env.staging",
        stagingrelease: ".env.staging",
        productdebug  : ".env.product",
        productrelease: ".env.product",
]
apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId project.env.get("ANDROID_APP_ID")
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode project.env.get("ANDROID_APP_VERSION_CODE").toInteger()
        versionName project.env.get("ANDROID_APP_VERSION_NAME")
        resValue "string", "build_config_package", "com.example.flutter_base"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "environment"
    productFlavors {
        develop
        staging
        product
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
